version: 2.1

jobs: 
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps: 
      - checkout 
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
             cd frontend
             npm install
             npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps: 
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: | 
             cd backend
             npm install
             npm run build 
            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
             cd frontend
             npm install
             npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0 
    steps: 
      - checkout 
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analyze frontend
          command: |
              cd frontend
              npm install
              # npm install oauth-sign@^0.9.0
              npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0 
    steps: 
      - checkout
      - restore_cache: 
          keys: [backend-build]
      - run:
          name: Analyze backend
          command: |
              cd backend
              npm install
              # npm install oauth-sign@^0.9.0
              npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
        - image: amazon/aws-cli
    steps:
      - checkout 
      - run: 
          name: install tar and gzip dependencies
          command: |
            yum install -y tar gzip
            yum update -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
         root: ~/
         paths: 
             - project/.circleci/ansible/inventory.txt
      #- destroy-environment

  configure-infrastructure:
    docker: 
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
      
    steps:
      
      
      
      - checkout 
      - add_ssh_keys:
          fingerprints: ["60:92:be:51:c0:3f:1a:c3:5b:64:fa:09:fb:da:77:40"]
      - attach_workspace:
          at: ~/
      
      - run:
          name: Install dependencies
          command: |
                    apk add tar gzip ansible nodejs
                    pip install --upgrade pip
                    pip install awscli
            
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure 
      
  run-migrations:
    docker: 
      - image: circleci/node:13.8.0
      # Docker image here that supports NodeJS
    steps:
      - checkout 
      - restore_cache:
           keys: [backend-build]
      # Checkout code from git
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations --force > migrations_dump.txt   
      - run:
          name: Send migration results to kvdb
          command: |
             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
             then
             curl https://kvdb.io/Gk4u63UH9nmwxtkUarCFJv/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
             fi
      - revert-migrations  
     
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
           requires: [build-frontend]
      - test-backend:
           requires: [build-backend]
      - scan-backend:
            requires: [build-backend]
      - scan-frontend:
            requires: [build-frontend]
      - deploy-infrastructure: 
            requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
            requires: [deploy-infrastructure]
      - run-migrations:
            requires: [configure-infrastructure]           



         