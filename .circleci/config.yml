version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
    #   when_destroy:
    #   type: string
    #   default: "on_fail"  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "############-- Destroying environment --############"
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}      
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
    
  revert-migrations:
    # description: Revert the last migration if successfully run in the current workflow.
    # parameters:
    #   when_revert:
    #   type: boolean
    #   default: true
    # steps:
    #   - run:
    #       name: Revert migrations
    #       when: on_fail
    #       command: |
    #         SUCCESS=$(curl --insecure https://kvdb.io/Gk4u63UH9nmwxtkUarCFJv/migration_$\{CIRCLE_WORKFLOW_ID:0:7\})
    #         if(( $SUCCESS==1 ));
    #         then
    #           cd ~/project/backend
    #           npm install
    #           npm run migrations:revert
    #         fi
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure "https://kvdb.io/Gk4u63UH9nmwxtkUarCFJv/migration_<<parameters.workflow_id>>")
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run build
              # Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
            fi

jobs: 
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps: 
      - checkout 
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
             cd frontend
             npm install
             npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps: 
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: | 
             cd backend
             npm install
             npm run build 
            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Run frontend test
          command: |
             cd frontend
             npm install
             npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0 
    steps: 
      - checkout 
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Analyze frontend
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: backend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0 
    steps: 
      - checkout
      - restore_cache: 
          keys: [backend-scan]
      - run:
          name: Analyze backend
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run: 
          name: install tar and gzip dependencies
          command: |
            yum install -y tar gzip
            yum update -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
  configure-infrastructure:
    docker: 
    #   - image: python:3.7-alpine3.11
    #   # Docker image here that supports Ansible
    # steps:
    #   - checkout 
    #   - add_ssh_keys:
    #       fingerprints: ["a0:3e:96:fb:34:7d:4e:65:a7:5a:86:ee:1a:7e:2f:84"]
    #   - attach_workspace:
    #       at: ~/
    #   - run:
    #       name: Install dependencies
    #       command: |
    #         apk add tar gzip ansible nodejs
    #         pip install --upgrade pip
    #         pip install awscli    
    #   - run:
    #       name: Configure server
    #       command: |
    #         cd .circleci/ansible
    #         ansible-playbook -i inventory.txt configure-server.yml
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "a0:3e:96:fb:34:7d:4e:65:a7:5a:86:ee:1a:7e:2f:84"
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install  
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure 
      - destroy-environment
      
  run-migrations:
    docker: 
      - image: circleci/node:13.8.0
      # Docker image here that supports NodeJS
    steps:
      - checkout 
      - restore_cache:
           keys: [backend-build]
      # Checkout code from git
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations --force > migrations_dump.txt   
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/Gk4u63UH9nmwxtkUarCFJv/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment
      - revert-migrations  
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install python3 -y
            yum install gzip tar curl -y
            curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -
            yum install -y nodejs-16.16.0-1nodesource
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            # tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations
            #TODO: provide this S3 bucket url
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a0:3e:96:fb:34:7d:4e:65:a7:5a:86:ee:1a:7e:2f:84"]
      - attach_workspace:
          at: ~/    
      - run:
          name: Install dependencies
          command: |
            apk add tar gzip ansible nodejs curl rsync openssh
            apk add --update npm
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            # cd backend
            # npm i
            # npm run build
            # cd ..
            # tar -C backend -czvf artifact.tar.gz .
            # mkdir .circleci/ansible/roles/deploy/files/
            # cp artifact.tar.gz .circleci/ansible/roles/deploy/files/
            # cd .circleci/ansible
            # echo 'Contents  of the inventory.txt file is -------'
            # cat inventory.txt
            # ansible-playbook -i inventory.txt deploy-backend.yml -vvv
            cd backend
            npm i
            npm run build
            cd ..
            cd .circleci/ansible
            mkdir files
            cd files
            # Zip the directory
            tar -C ../../../backend -czvf artifact.tar.gz .
            cd ../
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations
  smoke-test:
    # docker:
    #   - image: python:3.7-alpine3.11
    # steps:
    #   - checkout
    #   - run:
    #       name: Install dependencies
    #       command: |
    #         apk add tar gzip ansible nodejs curl
    #         apk add --update npm
    #         pip install awscli
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Install NodeJs
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install  
    #   - run:
    #   - attach_workspace:
    #       at: ~/
    #   - run:
    #       name: Get backend url
    #       command: |
    #         # export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
    #         # --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
    #         # export API_URL="http://${BACKEND_IP}:3030"
    #         # echo "API_URL = ${API_URL}"
    #         # echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
    #         # cat frontend/.env

    #         export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
    #           --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
    #         export API_URL="http://${BACKEND_IP}:3030"
    #         echo "API_URL = ${API_URL}"
    #         echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
    #         cat frontend/.env        
      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL=http://${BACKEND_IP}:3030
            echo BACKEND_IP: ${BACKEND_IP}
            echo ${API_URL}
            echo ${CIRCLE_WORKFLOW_ID:0:7}
            if curl -s ${API_URL}/api/status | grep "ok"
            then
               exit 0
            else
               exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"        
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 1
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install python3 -y
            yum install gzip tar curl -y
      - attach_workspace:
          at: ~/
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
             --template-file .circleci/files/cloudfront.yml \
             --stack-name UdapeopleInitialStack \
             --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
             --tags project=udapeople
      - destroy-environment
      - revert-migrations
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
              yum install python3 -y
              yum install gzip tar curl -y
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            echo "###### Fetch the Old workflow ID ######"
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo "###### Fetch the current workflow ID ######"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            echo "###### Fetch the stack names ######"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
                echo "#### Nothing to be deleted here ####"
            else
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
  configure-prometheus-node-exporter:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "a0:3e:96:fb:34:7d:4e:65:a7:5a:86:ee:1a:7e:2f:84"
      # attach workspace
      - attach_workspace:
          at: ~/ 
      - run:
          name: install_ansible
          command: |
            # Your code here
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install  
      - run:
          name: Configure Prometheus Node Exporter
          command: |
            # Your code here
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-prometheus-node-exporter.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment    
      - revert-migrations            
     
workflows:
  default:
    jobs:
    #   - build-frontend
    #   - build-backend
    #   - test-frontend:
    #       requires: [build-frontend]
    #   - test-backend:
    #       requires: [build-backend]
    #   - scan-backend:
    #       requires: [build-backend]
    #   - scan-frontend:
    #       requires: [build-frontend]
      - deploy-infrastructure: 
        #    requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-prometheus-node-exporter
          requires: [deploy-infrastructure]        
      - configure-infrastructure:
          requires: [configure-prometheus-node-exporter]
      - run-migrations:
          requires: [configure-infrastructure] 
      - deploy-frontend:
          requires: [run-migrations]  
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
    #   - cloudfront-update:
    #       requires: [smoke-test]
    #   - cleanup:
    #       requires: [cloudfront-update]                



         